{"version":3,"sources":["tasks.js","NewTask.js","TaskDetailsView.js","TaskCard.js","StatusColumn.js","DeleteConfirmModal.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["tasks","id","queue","name","description","status","priority","statusBlock","colors","NewTask","props","toggleNewTask","modal","emptyFields","useState","newTaskValues","setNewTaskValues","submitActive","setSubmitActive","toggle","Modal","isOpen","className","ModalHeader","ModalBody","Form","FormGroup","row","Col","sm","Label","Input","type","value","onChange","e","target","placeholder","text","console","log","ModalFooter","Button","color","onClick","addNewTask","Math","random","disabled","TaskDetailsView","changeTaskValues","toggleDeleteConfirm","taskDetails","setTaskDetails","openTaskView","editDisabled","setEditDisabled","changeCurrentTask","val","TaskCard","task","idx","changeTaskStatus","openTask","i","onTaskClickHandler","ListGroupItem","Row","xs","Low","Mid","High","lg","outline","pill","size","rightButtonDisplays","StatusColumn","el","taskList","md","ListGroup","map","key","DeleteConfirmModal","removeTask","openDeleteConfirm","Board","setTaskList","setModal","setOpenTaskView","setOpenDeleteConfirm","obj","arr","push","toggleTaskDetail","diff","changedTask","changedTaskList","filter","Container","fluid","index","findIndex","x","splice","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a36f16f9.chunk.js","sourcesContent":["export const tasks = [\n    {\n        id: 1,\n        queue: 1,\n        name: 'Create tasks list',\n        description: 'Create file with array objects',\n        status: 1,\n        priority: 'Low'\n    },\n    {\n        id: 2,\n        queue: 2,\n        name: 'Create Board file',\n        description: 'Create main file with states',\n        status: 2,\n        priority: 'Mid'\n    },\n    {\n        id: 3,\n        queue: 3,\n        name: 'Create new task file',\n        description: 'Create module for add new task',\n        status: 4,\n        priority: 'Low'\n    },\n    {\n        id: 4,\n        queue: 4,\n        name: 'Create status table',\n        description: 'Create module that shows status tables',\n        status: 2,\n        priority: 'High'\n    }\n];\n\nexport const statusBlock = ['ToDo', 'In Progress', 'In Review', 'Done'];\nexport const colors = [\"danger\", \"warning\", \"info\", \"success\"];\n\n","import React, {useState} from 'react';\nimport {Button, Col, Form, FormGroup, Input, Label, Modal, ModalBody, ModalFooter, ModalHeader} from 'reactstrap';\n\nfunction NewTask(props) {\n\n    const {\n        toggleNewTask,\n        modal,\n    } = props;\n\n    const emptyFields = {name: '', description: '', priority: 'Low'}\n    const [newTaskValues, setNewTaskValues] = useState(emptyFields);\n    const [submitActive, setSubmitActive] = useState(false)\n\n    const inputTaskName = (name) => {\n        setNewTaskValues({...newTaskValues, name: name});\n        if (newTaskValues.name && newTaskValues.description) {\n            setSubmitActive(true)\n        }\n    };\n\n    const inputTaskDescription = (text) => {\n        setNewTaskValues({...newTaskValues, description: text});\n        if (newTaskValues.name && newTaskValues.description) {\n            setSubmitActive(true)\n        }\n    };\n\n    const saveNewTask = () => {\n        props.addNewTask({...newTaskValues, status: 1, id: Math.random()});\n        setNewTaskValues(emptyFields);\n    };\n\n    const toggle = () => {\n        setNewTaskValues(emptyFields);\n        toggleNewTask();\n    };\n\n    const selectPriority = (value) => {\n        setNewTaskValues({...newTaskValues, priority: value});\n        console.log(newTaskValues)\n    }\n\n    return (\n        <div>\n            <Modal isOpen={modal} toggle={toggle} className=' modal-big'>\n                <ModalHeader toggle={toggle}>Create new task</ModalHeader>\n                <ModalBody>\n                    <Form>\n                        <FormGroup row>\n                            <Col sm=\"2\">\n                                <Label className=\"float-right\">Title</Label>\n                            </Col>\n                            <Col>\n                                <Input\n                                    type=\"test\"\n                                    name=\"title\"\n                                    value={newTaskValues.name}\n                                    onChange={(e) => inputTaskName(e.target.value)}/>\n                            </Col>\n                        </FormGroup>\n                        <FormGroup row>\n                            <Col sm=\"2\">\n                                <Label className=\"float-right\">Description</Label>\n                            </Col>\n                            <Col>\n                                <Input\n                                    type=\"textarea\"\n                                    name=\"text\"\n                                    id=\"exampleText\"\n                                    placeholder={newTaskValues.description}\n                                    onChange={(e) => inputTaskDescription(e.target.value)}/>\n                            </Col>\n                        </FormGroup>\n                        <FormGroup row>\n                            <Col sm=\"2\">\n                                <Label className=\"float-right\">Priority</Label>\n                            </Col>\n                            <Col sm=\"2\">\n                                <Input type=\"select\" name=\"select\" id=\"exampleSelect\"\n                                       onChange={(e) => selectPriority(e.target.value)}>\n                                    <option>Low</option>\n                                    <option>Mid</option>\n                                    <option>High</option>\n                                    >\n                                </Input>\n                            </Col>\n                        </FormGroup>\n                    </Form>\n                </ModalBody>\n                <ModalFooter>\n                    <Button color=\"primary\" onClick={saveNewTask} disabled={!submitActive}>Save</Button>{' '}\n                    <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\n                </ModalFooter>\n            </Modal>\n        </div>\n    );\n}\n\nexport default NewTask;\n","import React, {useState} from 'react';\nimport {Button, Col, Form, FormGroup, Input, Label, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\n\nfunction TaskDetailsView(props) {\n\n  const {\n    toggle,\n    changeTaskValues,\n    toggleDeleteConfirm,\n    taskDetails,\n    setTaskDetails,\n    openTaskView,\n  } = props;\n\n  const [editDisabled, setEditDisabled] = useState(true);\n  // const [taskValues, setTaskValues] = useState({...props.taskDetails});\n\n  const inputNameHandler = (val) => {\n    setTaskDetails({...taskDetails, name : val })\n  };\n\n  const inputDescrHandler = (val) => {\n    setTaskDetails({...taskDetails, description : val })\n  };\n\n  const inputPriorHandler = (val) => {\n    setTaskDetails({...taskDetails, priority : val })\n  };\n\n  const inputEditHandler = () => {\n    editDisabled ? setEditDisabled(false) : (changeCurrentTask());\n  };\n\n  const changeCurrentTask = () => {\n    changeTaskValues(taskDetails);\n    setEditDisabled(true);\n    toggle();\n  };\n\n  const deleteButtonHandler = () => {\n    toggleDeleteConfirm();\n    toggle();\n  }\n\n\n  return (\n    <div>\n        <Modal isOpen={openTaskView} toggle={toggle} className=' modal-big'>\n          <ModalHeader toggle={toggle}>Task details</ModalHeader>\n          <ModalBody>\n            <Form>\n              <FormGroup row>\n                <Col sm=\"2\">\n                  <Label className=\"float-right\">Title</Label>\n                </Col>\n                <Col>\n                  <Input\n                      disabled={editDisabled}\n                      type=\"test\"\n                      name=\"title\"\n                      value={taskDetails.name}\n                      onChange={(e) => inputNameHandler(e.target.value)}\n                  />\n                </Col>\n              </FormGroup>\n              <FormGroup row>\n                <Col sm=\"2\">\n                  <Label className=\"float-right\" >Description</Label>\n                </Col>\n                <Col>\n                  <Input\n                      disabled={editDisabled}\n                      value={taskDetails.description}\n                      type=\"textarea\"\n                      name=\"text\"\n                      id=\"exampleText\"\n                      onChange={(e) => inputDescrHandler(e.target.value)}\n                  />\n                </Col>\n              </FormGroup>\n              <FormGroup row>\n                <Col sm=\"2\">\n                  <Label className=\"float-right\">Priority</Label>\n                </Col>\n                <Col sm=\"2\">\n                  <Input type=\"select\" disabled={editDisabled} id=\"exampleSelect\"\n                         value={taskDetails.priority}\n                         onChange={(e)=>inputPriorHandler(e.target.value)}\n                  >\n                    <option>Low</option>\n                    <option>Mid</option>\n                    <option>High</option>>\n                  </Input>\n                </Col>\n              </FormGroup>\n            </Form>\n          </ModalBody>\n          <ModalFooter row>\n            <Col>\n            <Button color=\"danger\" className=\"float-left\" onClick={deleteButtonHandler}>Delete Task</Button>\n            </Col>\n            <Button color=\"primary\" onClick={inputEditHandler}>{editDisabled ? 'Edit': 'Save'}</Button>{' '}\n            <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\n          </ModalFooter>\n        </Modal>\n    </div>\n  );\n}\n\nexport default TaskDetailsView;\n","import React from 'react';\nimport {FiAlertTriangle, FiChevronsLeft, FiChevronsRight, FiTrash2} from \"react-icons/fi\";\nimport {Button, Col, Label, ListGroupItem, Row} from \"reactstrap\";\n\nconst TaskCard = (props) => {\n\n    const {\n        task,\n        idx,\n        changeTaskStatus,\n        openTask,\n        toggleDeleteConfirm,\n        setTaskDetails\n    } = props;\n\n    const priorityColors = {\n        Low: \"light\",\n        Mid: \"warning\",\n        High: \"danger\"\n    }\n\n    console.log()\n\n    const leftButtonDisplays = (i) => i === 0 ? ' hidden' : '';\n    const rightButtonDisplays = (i) => i === 3 ? ' hidden' : '';\n\n    const buttonRightHandler = () => {\n        changeTaskStatus(task.id, +1);\n    };\n\n    const buttonLeftHandler = () => {\n        changeTaskStatus(task.id, -1);\n    };\n\n    const onTaskClickHandler = () => {\n        openTask(task);\n    };\n\n    const deleteHandler = () => {\n        setTaskDetails(task);\n        toggleDeleteConfirm();\n    };\n\n\n    return (\n        <div>\n            <ListGroupItem className=\"bg-light\">\n                <Row className=\"pointer\" onClick={onTaskClickHandler} color='danger'>\n                    <Col xs=\"2\">\n                        <FiAlertTriangle className={priorityColors[task.priority] + \" text-xs-right\"}/>\n                    </Col>\n                    <Col lg=\"9\">\n                        <Label className=\"pointer\" onClick={onTaskClickHandler}>\n                            <strong>{task.name}</strong>\n                        </Label>\n                        <p><i>details...</i></p>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Button\n                            color=\"secondary\"\n                            outline\n                            pill\n                            size=\"sm\"\n                            onClick={buttonLeftHandler}\n                            className={leftButtonDisplays(idx) + ' pointer float-left'}><FiChevronsLeft/></Button>\n                    </Col>\n                    <Col>\n                        <Col>\n                            <Button onClick={deleteHandler} pill className='float-right' size=\"sm\"\n                                    color='danger'><FiTrash2/></Button>\n                        </Col>\n                    </Col>\n                    <Col>\n                        <Button\n                            color=\"secondary\"\n                            outline\n                            pill\n                            size=\"sm\"\n                            onClick={buttonRightHandler}\n                            className={rightButtonDisplays(idx) + ' pointer float-right'}><FiChevronsRight/></Button>\n                    </Col>\n                </Row>\n            </ListGroupItem>\n        </div>\n    );\n};\n\nexport default TaskCard;","import React from 'react';\nimport {Col, ListGroup, ListGroupItem } from 'reactstrap';\nimport {colors} from \"./tasks\";\nimport TaskCard from \"./TaskCard\";\n\nfunction StatusColumn (props) {\n\n    const {\n        el,\n        idx,\n        taskList,\n        changeTaskStatus,\n        openTask,\n        setTaskDetails,\n        toggleDeleteConfirm\n    } = props;\n\n    return (\n        <Col md='3' color={colors[idx]} className=\"px-md-1\">\n            <ListGroup>\n                <ListGroupItem color={colors[idx]} >\n                    {el}\n                </ListGroupItem>\n                 {taskList.map(task => task.status === idx + 1 &&\n                     <TaskCard key={task.id}\n                               task={task}\n                               idx={idx}\n                               toggleDeleteConfirm={toggleDeleteConfirm}\n                               setTaskDetails={setTaskDetails}\n                               changeTaskStatus={changeTaskStatus}\n                               openTask={openTask} />\n                 )}\n            </ListGroup>\n        </Col>\n    );\n}\n\nexport default StatusColumn;\n","import React from 'react';\nimport {Button, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\n\nfunction DeleteConfirmModal(props) {\n\n    const {\n        removeTask,\n        openDeleteConfirm,\n        toggleDeleteConfirm\n    } = props;\n\n    const deleteButtonHandler = () => {\n        removeTask();\n        toggleDeleteConfirm();\n    }\n\n\n    return (\n        <div>\n            <Modal isOpen={openDeleteConfirm} toggle={toggleDeleteConfirm}>\n                <ModalHeader toggle={toggleDeleteConfirm}>Are you sure?</ModalHeader>\n                <ModalBody>\n                    Do you really want to delete this task?\n                    This process cannot be undone.\n                </ModalBody>\n                <ModalFooter row>\n                    <Button color=\"primary\" onClick={deleteButtonHandler}>Delete</Button>{' '}\n                    <Button color=\"secondary\" onClick={toggleDeleteConfirm}>Cancel</Button>\n                </ModalFooter>\n            </Modal>\n        </div>\n    );\n}\n\nexport default DeleteConfirmModal;\n","import React, {useState} from 'react';\nimport {Button, Container, Row} from 'reactstrap';\nimport {statusBlock, tasks} from './tasks';\nimport NewTask from \"./NewTask\";\nimport TaskDetailsView from \"./TaskDetailsView\";\nimport StatusColumn from \"./StatusColumn\";\nimport DeleteConfirmModal from \"./DeleteConfirmModal\";\n\n\nfunction Board() {\n\n    const emptyFields = {name: '', description: ''}\n    const [newTaskValues, setNewTaskValues] = useState(emptyFields);\n    const [taskList, setTaskList] = useState([...tasks]);\n    const [modal, setModal] = useState(false);\n    const [openTaskView, setOpenTaskView] = useState(false);\n    const [openDeleteConfirm, setOpenDeleteConfirm] = useState(false);\n    const [taskDetails, setTaskDetails] = useState({});\n\n    const addNewTask = (obj) => {\n        const arr = [...taskList];\n        arr.push(obj);\n        setTaskList([...arr]);\n        toggleNewTask();\n    };\n\n    const openTask = (obj) => {\n        setTaskDetails({...obj})\n        toggleTaskDetail();\n    };\n\n    const changeTaskStatus = (id, diff) => {\n        const changedTask = [...taskList]\n        changedTask.map(el => el.id === id ? (el.status += diff) : '');\n        setTaskList([...changedTask])\n    };\n\n    const changeTaskValues = (obj) => {\n        let index = taskList.findIndex(x => x.id === obj.id);\n        const changedTask = [...taskList]\n        changedTask.splice(index, 1, obj);\n        setTaskList([...changedTask]);\n    };\n\n    const removeTask = () => {\n        const changedTaskList = [...taskList].filter(el => el.id !== taskDetails.id);\n        setTaskList(changedTaskList);\n    };\n\n    const toggleTaskDetail = () => setOpenTaskView(!openTaskView);\n    const toggleDeleteConfirm = () => setOpenDeleteConfirm(!openDeleteConfirm);\n    const toggleNewTask = () => setModal(!modal);\n\n\n    return (\n        <Container className=\"themed-container\" fluid=\"lg\">\n            <Button color=\"primary\" onClick={toggleNewTask}>New task</Button>\n            <Row>\n                {statusBlock.map((el, idx) =>\n                    <StatusColumn key={el}\n                                  el={el}\n                                  idx={idx}\n                                  changeTaskStatus={changeTaskStatus}\n                                  removeTask={removeTask}\n                                  setTaskDetails={setTaskDetails}\n                                  openTask={openTask}\n                                  toggleDeleteConfirm={toggleDeleteConfirm}\n                                  taskList={taskList}/>\n                )}\n            </Row>\n\n            <NewTask addNewTask={addNewTask}\n                     toggleNewTask={toggleNewTask}\n                     newTaskValues={newTaskValues}\n                     setNewTaskValues={setNewTaskValues}\n                     modal={modal}/>\n            <TaskDetailsView addNewTask={addNewTask}\n                             toggle={toggleTaskDetail}\n                             taskDetails={taskDetails}\n                             setTaskDetails={setTaskDetails}\n                             toggleDeleteConfirm={toggleDeleteConfirm}\n                             removeTask={removeTask}\n                             changeTaskValues={changeTaskValues}\n                             openTaskView={openTaskView}/>\n\n            <DeleteConfirmModal toggleDeleteConfirm={toggleDeleteConfirm}\n                                openDeleteConfirm={openDeleteConfirm}\n                                removeTask={removeTask}/>\n        </Container>\n    );\n}\n\nexport default Board;\n","import React, { StrictMode } from 'react';\nimport Board from './Board';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './custom.css';\n\n\nfunction App() {\n    return (\n        <StrictMode>\n            <Board/>\n        </StrictMode>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\nimport './custom.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}